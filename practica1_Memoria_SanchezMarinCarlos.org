#+AUTHOR:Carlos Sánchez Marín
#+EMAIL: carlos.sanchez.marin@alumnos.upm.es
#+TITLE: Memoria Práctica de Lógica Pura
#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+OPTIONS: toc:t email:t
#+OPTIONS: texht:t
#+OPTIONS: org-src-fontify-natively:t
#+OPTIONS: ^:{} _:{}
#+LATEX_CLASS:article
#+LATEX_CLASS_OPTIONS:[a4paper]
#+LATEX_HEADER: \addtolength{\textwidth}{2in}
#+LATEX_HEADER: \addtolength{\hoffset}{-0.7in}
#+LATEX_HEADER: \addtolength{\voffset}{-0.7in}

#+LATEX: \newpage

* *Ejercicio 1*
** *Predicados implementados*
*** *numero(DigitoPeano)*
Predicado de aridad 1 que se hace cierto si ~DigitoPeano~ es un número en representación de Peano.

#+begin_src prolog
numero(0).
numero(s(X)) :- numero(X).
#+end_src

*** *esNumero(NumeroPeano)*
Predicado de aridad 1 que se hace cierto si ~NumeroPeano~ es un número en representación de Peano o ~NumeroPeano~ es una lista cuya cabeza es un número en notación de Peano. Este predicado para hacerse verdadero requiere que los predicados ~parteEntera/1~ y ~parteDecimal/1~ también sean ciertos.

#+begin_src prolog
esNumero(X) :- numero(X).
esNumero([X|[]]) :- numero(X).
esNumero([X|Y]) :- numero(X), esNumero(Y).
#+end_src

*** *colaPeano(ListaPeano,UltimoNumero)*
Predicado de aridad 2 que se hace cierto si ~UltimoNumero~ es el último elemento de ~ListaPeano~.

#+begin_src prolog
colaPeano([X|[]],X).
colaPeano([_|X],Y) :- colaPeano(X,Y).
#+end_src

*** *listaPeano(ListaNumeros)*
Predicado de aridad 1 que se hace cierto si ~ListaNumeros~ está compuesta por números en representación de Peano.

#+begin_src prolog
listaPeano([]).
listaPeano([X|Y]) :- numero(X), listaPeano(Y).
#+end_src

*** *esVacio(Lista)*
Predicado de aridad 1 que se hace cierto cuando ~Lista~ está vacía.

#+begin_src prolog
esVacio([]).
#+end_src

*** *inicio(ListaOriginal,ListaSinCola)*
Predicado de aridad 2 que se hace cierto si ~ListaSinCola~ es igual a ~ListaOriginal~ sin su último elemento.

#+begin_src prolog
inicio([X],[]) :- numero(X).
inicio([X|Z],[X|W]) :- inicio(Z,W).
#+end_src

*** *primero(ListaPeano,PrimerNumero)*
Predicado de aridad 2 que se hace cierto si ~PrimerNumero~ es la cabeza de ~ListaPeano~.

#+begin_src prolog
primero([X|_],X).
#+end_src

*** *quitarCabeza(ListaOriginal,ListaSinCabeza)*
Predicado de aridad 2 que se hace cierto si ~ListaSinCabeza~ es ~ListaOriginal~ sin su primer elemento.

#+begin_src prolog
quitarCabeza([_|X],X).
#+end_src

*** *concat(Lista1,Lista2,ListaUnion)*
Predicado de aridad 3 que se hace cierto si ~ListaUnion~ es igual a la concatenación de ~Lista1~ y ~Lista2~ con la estructura [Lista1,Lista2].

#+begin_src prolog
concat([],Xfinal, Xfinal) :- listaPeano(Xfinal).
concat([X|Y],Z, [X|Xfinal]) :- numero(X), concat(Y,Z,Xfinal).
#+end_src

*** *soloNueve(ListaOriginal,ListaNueves)*
Predicado de aridad 2 que se hace cierto cuando ~ListaNueves~ es una lista que contiene todos los nueves seguidos desde la cola de ~ListaOriginal~.

#+begin_src prolog
soloNueve([],[]).
soloNueve(X,[]) :- colaPeano(X,Y), \=(Y,s(s(s(s(s(s(s(s(s(0)))))))))).
soloNueve(X,[s(s(s(s(s(s(s(s(s(0)))))))))|Y]) :- inicio(X,Z), colaPeano(X,XX), igual(XX,s(s(s(s(s(s(s(s(s(0)))))))))), soloNueve(Z,Y).
#+end_src

*** *convertZero(ListaOriginal,ListaCeros)*
Predicado de aridad 2 que se hace cierto cuando ~ListaCeros~ es una lista de ceros del mismo tamaño que ~ListaOriginal~.

#+begin_src prolog
convertZero([],[]).
convertZero([_|X],[0|Y]) :- convertZero(X,Y).
#+end_src

*** *quitarNueve(ListaOriginal,ListaNueves,ListaSinNueves)*
Predicado de aridad 3 que se hace cierto cuando ~ListaSinNueves~ es una lista resultado de truncar por la cola ~ListaOriginal~ siendo esta igual a ~ListaNueves~.

#+begin_src prolog
quitarNueve(X,X,[]).
quitarNueve([X|XX], Y, [X|ZZ]) :- quitarNueve(XX,Y,ZZ).
#+end_src

*** *igual(X,X)*
Predicado de aridad 2 que se hace cierto si los dos elementos son iguales

#+begin_src prolog
igual(X,X).
#+end_src

*** *mayor(Numero)*
Predicado de aridad 1 que se hace cierto si ~Numero~ es mayor o igual que 5.

#+begin_src prolog
mayor(s(s(s(s(s(0)))))).
mayor(s(X)) :- mayor(X).
#+end_src

*** *menor(Numero)*
Predicado de aridad 1 que se hace cierto si ~Numero~ tiene un valor entre 0 y 4.

#+begin_src prolog
menor(0).
menor(s(0)).
menor(s(s(0))).
menor(s(s(s(0)))).
menor(s(s(s(s(0))))).
#+end_src
